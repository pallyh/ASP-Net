DAL - Data Access Layer - "Слой" работы с данными
Слой согласования БД (или другого источника данных)
 и слоя логики (BLL - Busines Logic Layer)
Если по-простому, то это "перевод" сущностей БД (таблиц)
 в сущности языка (объекты/коллекции)

В ASP наиболее популярен EntityFrameworkCore
Для работы с ним устанавливаем NuGet:
Microsoft.EntityFrameworkCore  (5/6 в зависимости от проекта)
Microsoft.EntityFrameworkCore.SqlServer  (той же версии)
Microsoft.EntityFrameworkCore.Tools  (--\\--)

На примере создания таблицы пользователей
1. Структура
  Создаем папки
   DAL
    Context
    Entities

2. Сущности - классы, "отражающие" структуру данных таблиц
 В папке Entities создаем класс User

3. В папке Context описываем сам контекст данных и его
 классы конфигураций (cм. комментарии в классах).
  IntroContext
  UsersConfiguration

4. Строка подключения. Т.к. БД создается автоматически, мы
  создаем строку подключения к несуществующей БД (либо к пустой)
  appsettings.json - добавляем строку подключения

5. Регистрация контекста данных как службы - в Startup/Program
    services.AddDbContext<DAL.Context.IntroContext>(
        options => options.UseSqlServer(
            Configuration.GetConnectionString("introDb")
    ));

6. Миграции - способ сохранения истории изменений БД, а также
  возможность развертывания и отката состояния БД
  Tools -> NuGet -> PM Console
  Создаем начальную миграцию (Init - название, можно любое)
    PM>  Add-Migration Init
  Обновляем БД (создаем)
    PM> Update-Database
-------------------------------------------
Проверяем: подключаемся к БД
 Tools -> Connect to DB

--------------------------------------------
Отмена миграции
PM> Remove-Migration
Если не отменяет - обновляем БД до исходной миграции
PM> Update-Database 0
PM> Remove-Migration
--------------------------------------------

Использование контекста
Контекст регистрируется как служба, поэтому внедряется
как зависимость (через конструктор)