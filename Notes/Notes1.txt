Введение в ASP .NET CORE
ASP - Active Server Pages - технология создания веб-приложений, изначально,
ориентированная на серверную активность. На сегодня - это универсальная технология,
в т.ч. с поддержкой серверных страниц (Razor Pages)

Виды веб-приложений
статические - на сервере хранятся HTML страницы, которые возвращаются на соотв. запросы
 (лендинг - тематическая страница, "паспорт" фирмы, товара, услуги)
с серверной активностью (ASP, JSP, PHP) - со стороны сервера есть запускаемый модуль,
 он анализируется запрос (клиента) и может собрать страницу "на лету", используя
 условные и циклические конструкции. В итоге клиент получает HTML, но он динамический,
 то есть меняется в зависимости от параметров запроса (например, фильтр-поиск)
с клиентской активностью (SPA - single page app, Web-API) - данные на сервер отправляются
 в фоновом режиме, при получении ответа перерисовываются части страницы. Сервер
 при этом передает "сырые" данные (не HTML), обычно в JSON / XML формате.

Как выполняется серверная активность?
Browser      Server (IIS)      .NET (VM)
 Запрос ---> Разбор  ---------> project.DLL
Отображ  <--  Сбор  <---------- результат (return)

MVC (Model View Controller) - паттерн (шаблон, образец) архитектуры, согласно которому
в структуре проекта можно выделить три части:
 - Model: поставщик данных, "слой" в котором данные из хранилища, извлекаются и
     представляются другим частям приложения в виде объектов
 - View (представление) - визуальная часть, обычно, интерфейс пользователя.
     В случае Web-API представлением называют и "сырые" данные, точнее, их упаковку
 - Controller - модуль взаимодействия с входом (запросами), определяющий какую
     модель запросить и в какое представление передать.

-----------------------------------------------------------------------------
Инверсия управления / внедрение зависимостей
SOLID -- D - DI 

Суть инверсии - делегирование задачи создания объектов специальному
модулю.
 Инверсия - объекты создаем не "мы" в точке необходимости, а 
  запрашиваем их в "контейнере"
 Зависимость - "заявка" на то, что в нашем объекте понадобится
  другой объект
 Иньекция - процедура внедрения зависимостей, передача данных об
  объекте, который заявлен как зависимость.
  Слово-синоним Resolution 

Процесс инверсии:
 0. Создаем службы - описываем классы, которые будут внедряться
 1. Регистрация источников (служб, сервисов) - сущностей, которые
     будут внедрятся в другие объекты
 2. Ограничение жизненного цикла источников (при следующем обращении
     брать новый или ранее созданный)
 3. Описание зависимостей
 4. Внедрение (решение) зависимостей -- построение объекта

Без инверсии                          С инверсией
class TheClass {                         class TheClass {
 prop = new ... // сами создаем           [Dependency] prop;  // DI
}                                        ... }

Способы внедрения:
 - через конструктор класса  -- рекомендовано
 - свойство с атрибутом 
 - через параметр метода

Пример: есть рекомендация (по безопасности) использовать один
генератор случайных чисел во всем проекте

- Создаем папку служб "Services" (название произвольно)
- В ней создаем класс RandomService
- В классе Startup (Core 5-) / В классе Program (Core 6)
   добавляем регистрацию службы
   services.AddSingleton<RandomService>();
- Открываем класс контроллера
   добавляем поле private readonly RandomService _randomService;
   в конструктор иньектируем зависимость 
    public HomeController( ... RandomService randomService)
    { сохраняем переданную ссылку (иньекцию)
        _randomService = randomService;
    }
- Используем службу по ссылке _randomService

Недостаток схемы: sOlid (Open/Close Principle, OCP)
Если нужно вносить изменения в работу службы, то приходится менять
объект. OCP рекомендует не изменять, а расширять. Это дает возможность
"отката" - легкого возврата к предыдущей версии.

Такая возможность реализуется через интерфейсы: 
 В контейнере регистрируются интерфейсы и их реализации
 В точках иньекции заявляется зависимость от интерфейсов,
  а контейнер в эти точки подставляет реализации.

Пример: служба хеширования
- В Службах создаем интерфейс IHasher
- Там же - реализацию (Md5Hasher)
- Регистрируем "сопоставление" интерфейса и реализации
   services.AddSingleton<IHasher, ShaHasher>();
- В контроллере создаем иньекцию типа IHasher

AddSingleton - максимальное время жизни (один объект используется
  сколько можно, новые не создаются)
AddScoped - время жизни - один запрос клиента (сайта)
AddTransient - каждый раз создание нового объекта

Д.З. Создать службу "времени", которая дает возможность получить
раздельно дату и время. Внедрить ее в контроллер, вывести на
страницу. Создать вторую реализацию, которая выводит дату на
другом языке (в другом формате)
